#include "bin_packing_join.hpp"

#include <algorithm>
#include <cassert>
#include <cerrno>
#include <fstream>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

#include "db.hpp"
#include "enclave_u.h" // Headers for untrusted part (autogenerated by edger8r)
#include "sort_helper.hpp"
#include "time.hpp"

#ifdef MAX_HEAP_SIZE
const size_t max_heap_size = MAX_HEAP_SIZE;
#else
const size_t max_heap_size = 7E7; // 70MB
#endif
const size_t usable_heap_size = max_heap_size / 4;

int bin_packing_join(int db_id, join_condition_t *join_cond,
                     const std::string &csv_left, const std::string &csv_right,
                     int *out_tbl_id) {
    int rtn = 0;

    // Determine size of data blocks
    const size_t dblk_size = usable_heap_size;
    const size_t rows_per_dblk = dblk_size / MAX_ROW_SIZE;

#if defined(REPORT_BIN_PACKING_JOIN_STATS)
    INFO("Datablock size: %lu bytes.\n", dblk_size);
    INFO("Rows per datablock: %lu rows.\n", rows_per_dblk);
#endif
    if (rows_per_dblk <= 0) {
        ERR("Usable SGX memory is smaller than one row\n");
    }
    metadata_t metadata;

    do {
#if defined(REPORT_BIN_PACKING_JOIN_STATS)
        unsigned long long start, end;
        unsigned long long cycles;
        double secs;
        start = RDTSC_START();
#endif

        int dblk_cnt = 0;

        if (collect_metadata(csv_left, join_cond->fields_left[0], rows_per_dblk,
                             &dblk_cnt, &metadata)) {
            ERR("Failed to collect metadata\n");
            rtn = -1;
            break;
        }

        if (collect_metadata(csv_right, join_cond->fields_right[0],
                             rows_per_dblk, &dblk_cnt, &metadata)) {
            ERR("Failed to collect metadata\n");
            rtn = -1;
            break;
        }



#if defined(REPORT_BIN_PACKING_JOIN_STATS)
        end = RDTSCP();

        cycles = end - start;
        secs = (cycles / cycles_per_sec);

        INFO("Collecting metadata took %llu cycles (%f sec)\n", cycles, secs);
        start = RDTSC_START();
#endif

        std::vector<bin_t> bins;
        if (pack_bins(dblk_cnt, metadata, &bins)) {
            ERR("Failed to pack bin\n");
            rtn = -1;
            break;
        }

#if defined(REPORT_BIN_PACKING_JOIN_STATS)
        end = RDTSC_START();

        cycles = end - start;
        secs = (cycles / cycles_per_sec);

        INFO("Pack bins took %llu cycles (%f sec)\n", cycles, secs);
        start = RDTSCP();
#endif

    } while (0);

    // Clean up


    // TODO: remove this line
    *out_tbl_id = 1024;
    return rtn;
}

int collect_metadata(const std::string &filename, int column,
                     const size_t rows_per_dblk, int *dblk_count,
                     metadata_t *metadata) {
    int original_dblk_cnt = *dblk_count;
    std::ifstream ifile(filename);
    int row_num = 0;
    for (std::string line; ifile; ++(*dblk_count)) {
        std::unordered_map<std::string, int> counter;
        for (int i = 0; i < rows_per_dblk && std::getline(ifile, line); ++i) {
            std::string::size_type start = 0;
            for (int i = 0; i < column; ++i) {
                start = line.find(',', start + 1); // Assuming line[0] != ','
            }
            if (start == std::string::npos) {
                ERR("column number %d is larger than the number of elements of "
                    "%s at row %d.\n",
                    column, filename.c_str(), row_num);
                return -1;
            }
            decltype(start) end = line.find(',', start + 1);
            if (start == end) {
                ERR("value is empty. file: %s; column: %d; row %d.\n",
                    filename.c_str(), column, row_num);
                return -1;
            }
            counter[line.substr(start, end)]++;
            row_num++;
        }

        // Populate the the metadata after reading each datablock.
        for (const auto &pair : counter) {
            (*metadata)[pair.first].count += pair.second;
            (*metadata)[pair.first].dblks.emplace_back(*dblk_count,
                                                       pair.second);
        }
    }

    // Flush the last counter
#if defined(REPORT_BIN_PACKING_JOIN_STATS)
    INFO("%d rows read and %d datablocks of metadata collected for %s.\n",
         row_num, *dblk_count - original_dblk_cnt, filename.c_str());
#endif

    return 0;
}

// A vector of <size, values>
typedef std::vector<std::pair<int, std::vector<std::string>>> temp_bin_t;
// Attempt to merge `b` into `a`. Nothing happens and return false if failed.
bool mergeBins(temp_bin_t *a, const temp_bin_t *b, const int cell_size) {
    assert(a->size() == b->size());
    for (int i = 0; i < a->size(); ++i) {
        if ((*a)[i].first + (*b)[i].first > cell_size) {
            return false;
        }
    }

    for (int i = 0; i < a->size(); ++i) {
        (*a)[i].first += (*b)[i].first;

        std::copy((*b)[i].second.begin(), (*b)[i].second.end(),
                  std::back_inserter((*a)[i].second));
    }
    return true;
}

// Sort metadata and pack bins
int pack_bins(const int dblk_count, const metadata_t &metadata,
              std::vector<bin_t> *bins) {
    const int cell_size = usable_heap_size / dblk_count / MAX_ROW_SIZE;
    if (cell_size <= 0) {
        ERR("Too many datablocks created.\n");
        return -1;
    }
    std::vector<metadata_value_t> sorted_meta;
    // TODO: can be optimized using std::move once the algo is stablized
    std::transform(metadata.cbegin(), metadata.cend(),
                   std::back_inserter(sorted_meta),
                   [](const auto &it) { return it.second; });

    // Do we really need this?
    std::sort(sorted_meta.begin(), sorted_meta.end(),
              [](const auto &a, const auto &b) { return a.count > b.count; });

    // Sort the count of each value in a cell in addtion to the `bin_t`

    std::vector<temp_bin_t> res;
    temp_bin_t last_bin(dblk_count);

    for (const auto &it : metadata) {
        auto &dblks = it.second.dblks;
        temp_bin_t bin(dblk_count);
        for (const auto &pair : dblks) {
            bin[pair.first].first += pair.second;
            bin[pair.first].second.push_back(it.first);
        }
        bool merged =
            std::any_of(res.begin(), res.end(), [&bin, cell_size](auto &b) {
                return mergeBins(&b, &bin, cell_size);
            });
        if (!merged) {
            res.emplace_back(std::move(bin));
        }
    }

#if defined(REPORT_BIN_PACKING_JOIN_STATS)
    INFO("%lu bins created with %d cells each bin and %d values each cell\n",
         res.size(), dblk_count, cell_size);

#if defined(REPORT_BIN_PACKING_JOIN_PRINT_BIN)
    for (const temp_bin_t &bin : res) {
        for (const auto &cell : bin) {
            printf("%3d ", cell.first);
        }
        printf("\n");
    }
#endif

#endif

    return 0;
}
