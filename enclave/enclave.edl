 /* Enclave.edl - Top EDL file. */

enclave {

	include "db.hpp" 
	include "stdio.h"

	untrusted {
		void ocall_print_string([in, string] const char *str);
		/* File operations to read/write tables from disk */
		int ocall_open_file([in, string] const char *name); 

		void *ocall_alloc_io_buf(unsigned long size); 
		void ocall_free_io_buf([user_check] void *buf);
		
		/* BU: ok, this is exploitable... enclave can overwrite it's own memory */
		int ocall_write_file(int fd, [user_check] void* buf, unsigned long size); 
		int ocall_read_file(int fd, [user_check] void* buf, unsigned long size);
		int ocall_seek(int fd, unsigned long offset);
		int ocall_close_file(int fd);
		int ocall_rm_file([in, string] const char *name); 


		/* RDTSC is illegal instruction inside SGX for SGX v1 */
		unsigned long long ocall_rdtsc(void); 

		/* Various tests */
		void ocall_null_ocall(void);



	};
 
	trusted {
		public int ecall_create_db([in,size=name_len] const char *cname, int name_len, [out] int *db_id);
		public int ecall_free_db(int db_id);
		public int ecall_create_table(int db_id, [in,size=name_len] const char *cname, int name_len, [user_check]schema_t *schema, [out]int *table_id);
		public int ecall_insert_row_dbg(int db_id, int table_id, [user_check] void *row);
		public int ecall_flush_table(int db_id, int table_id);
		public int ecall_join(int db_id, [user_check]join_condition_t *c, [out] int *join_tbl_id);
		public int ecall_print_table_dbg(int db_id, int table_id, int start, int end);
		public int ecall_hash_bin_packing_join(int db_id,
			[user_check]join_condition_t *join_cond,
			[out] int *join_tbl_id);
		public int ecall_bin_pack_join(int db_id,
			[user_check]join_condition_t *join_cond,
			int rows_per_dblk,
			int num_rows_per_out_bin,
			int bin_info_tbl_id,
			int midpoint,
			int num_bins,
			int rows_per_cell,
			[out] int *join_tbl_id,
			int rows_per_out_bin);

		public int ecall_promote_table_dbg(int db_id, int table_id, int column, [out] int *promoted_table_id);
		public int ecall_column_sort_table_dbg(int db_id, int table_id, int column);
		public int ecall_column_sort_table_parallel(int db_id, int table_id, int column, int tid, int num_threads);

		public int ecall_sort_table(int db_id, int table_id, int column, [out] int *sorted_table_id);
		public int ecall_bitonic_sort_table_parallel(int db_id, int table_id, int field, int tid, int num_threads);

		public int ecall_quicksort_table(int db_id, int table_id, int field, [out] int *sorted_id);
		public int ecall_quicksort_table_parallel(int db_id, int table_id, int field, int tid, int num_threads);

		public int ecall_merge_and_sort_and_write(int db_id, 
			int left_table_id, 
			[user_check] int *project_columns_left,
			int num_project_columns_left,
			[user_check] int *promote_columns_left,
			int num_pad_bytes_left,
			int right_table_id,
			[user_check] int *project_columns_right,
			int num_project_columns_right,
			[user_check] int *promote_columns_right,
			int num_pad_bytes_right,
			[out] int *write_table_id);

		/* Various tests */
		public int ecall_spinlock_inc(unsigned long count);
		public int ecall_scan_table_dbg(int db_id, int table_id);
		public void ecall_test_null_ocall(void);
		public void ecall_null_ecall(void); 
                public int ecall_test_project_schema(void);
                public int ecall_test_pad_schema(void);
                public int ecall_test_project_row(void);
		public int ecall_barrier_test(unsigned long count, int num_threads, int tid);

		/* Buffer cache concurrent read/write test */
		public int ecall_bcache_test_create_read_write_table(int db_id, int from_table_id, [out]int *to_table_id);
		public int ecall_bcache_test_read_write(int db_id, int from_table_id, int to_table_id);
		public int ecall_bcache_test_cmp_read_write(int db_id, int from_table_id, int to_table_id);

	};

};
